
R version 2.13.1 (2011-07-08)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Loading required package: mvtnorm
Loading required package: subplex
Loading required package: deSolve
> 
> set.seed(921625222L)
> 
> data(ou2)
> 
> ics <- c("x1.0","x2.0")    # names of the initial condition parameters
> 
> p <- coef(ou2)
> p[ics] <- c(0,0)
> 
> fit <- mif(
+            ou2,
+            start=p,
+            Nmif=2,
+            ic.lag=1000,
+            var.factor=4,
+            ivps=ics,
+            rw.sd=c(
+              x1.0=1,x2.0=1
+              ),
+            Np=1000,
+            cooling.factor=1,
+            max.fail=10
+            )
Warning message:
mif warning: 'ic.lag' = 1000 > 100 = length(time('object')) is nonsensical.  Setting 'ic.lag' = 100. 
> 
> fit <- mif(
+            ou2,
+            start=p,
+            Nmif=2,
+            ic.lag=10,
+            var.factor=4,
+            ivps=ics,
+            rw.sd=c(
+              x1.0=1,x2.0=1
+              ),
+            Np=1000,
+            cooling.factor=1,
+            max.fail=10
+            )
Warning message:
mif warning: only IVPs are to be estimated, yet 'ic.lag' = 10 < 100 = length(time('object')), so unnecessary work is to be done. 
> 
> fit <- mif(
+            window(ou2,end=10),
+            start=p,
+            Nmif=300,
+            ic.lag=10,
+            var.factor=4,
+            ivps=ics,
+            rw.sd=c(
+              x1.0=1,x2.0=1
+              ),
+            Np=1000,
+            cooling.factor=0.99,
+            max.fail=10
+            )
> 
> print(logLik(pfilter(ou2,Np=2000)),digits=4)
[1] -479.4
> print(logLik(pfilter(ou2,params=p,Np=2000)),digits=4)
[1] -481.3
> print(logLik(pfilter(ou2,params=coef(fit),Np=2000)),digits=4)
[1] -480.3
> print(coef(fit,ics))
     x1.0      x2.0 
-2.991659  2.880117 
> print(p-coef(ou2))
alpha.1 alpha.2 alpha.3 alpha.4 sigma.1 sigma.2 sigma.3     tau    x1.0    x2.0 
      0       0       0       0       0       0       0       0       3      -4 
> print(coef(fit)-p)
  alpha.1   alpha.2   alpha.3   alpha.4   sigma.1   sigma.2   sigma.3       tau 
 0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000  0.000000 
     x1.0      x2.0 
-2.991659  2.880117 
> print(coef(fit)-coef(ou2))
     alpha.1      alpha.2      alpha.3      alpha.4      sigma.1      sigma.2 
 0.000000000  0.000000000  0.000000000  0.000000000  0.000000000  0.000000000 
     sigma.3          tau         x1.0         x2.0 
 0.000000000  0.000000000  0.008340701 -1.119883047 
> 
